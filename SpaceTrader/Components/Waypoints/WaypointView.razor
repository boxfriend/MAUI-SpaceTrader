@inject NavigationManager _navManager
<div>
    <div>
        <h4>@Waypoint.Symbol</h4> <span class="badge text-dark">@Waypoint.Type</span>
        <p><strong>System:</strong> @Waypoint.SystemSymbol (@Waypoint.X, @Waypoint.Y)</p>
    </div>
    <div>
        @if(Waypoint.Orbitals is not null)
        {
            @foreach(var orbital in Waypoint.Orbitals)
            {
                @orbital.Symbol
            }
        }
    </div>
    <div><strong>Faction:</strong> @Waypoint.Faction.Symbol</div>
    <div>
        @if(Waypoint.Traits is not null)
        {
            @foreach(var trait in Waypoint.Traits)
            {
                <span class="badge rounded-pill bg-light text-dark" data-bs-toggle="tooltip" data-bs-title="@trait.Description">@trait.Name</span>
            }
        }
    </div>
    <div>
        <button type="button" class="btn btn-info" disabled="@(!hasJumpGate)" @onclick="@(() => OnDetailsClick("jump-gate"))">Jump Gate</button>
        <button type="button" class="btn btn-info" disabled="@(!hasShipyard)" @onclick="@(() => OnDetailsClick("shipyard"))">Shipyard</button>
        <button type="button" class="btn btn-info" disabled="@(!hasMarket)" @onclick="@(() => OnDetailsClick("market"))">Market</button>
    </div>
</div>
@code {
    [Parameter] public Waypoint Waypoint { get; set; }
    [Parameter] public string ShipSymbol { get; set; }

    private bool hasJumpGate, hasShipyard, hasMarket;

    protected override void OnInitialized ()
    {
        base.OnInitialized();

        hasJumpGate = Waypoint.Type is "JUMP_GATE";
        hasShipyard = Waypoint.Traits.Any(x => x.Symbol.ToUpper() is "SHIPYARD");
        hasMarket = Waypoint.Traits.Any(x => x.Symbol.ToUpper() is "MARKETPLACE" or "BLACK_MARKET");
    }

    private void OnDetailsClick(string destination)
    {
        _navManager.NavigateTo($"waypoint/{Waypoint.SystemSymbol}/{Waypoint.Symbol}/{destination}/{ShipSymbol}");
    }
}
