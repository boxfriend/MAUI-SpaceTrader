@inject ApiClient _client
@inject NavigationManager _navManager
<div>
    <b>System</b>: @Nav.SystemSymbol <b>Waypoint</b>: @Nav.WaypointSymbol <button class="btn btn-info" @onclick="@WaypointDetailsClick">Details</button>
    @if(Nav.Route is not null)
    {    
        <div>
            <ShipRouteView Route=Nav.Route />
        </div>
    }
    Status: <b>@Nav.Status</b> <button class="btn btn-info" disabled="@(Nav.Status == "IN_TRANSIT")" @onclick="@ToggleDock">@(Nav.Status == "DOCKED" ? "To Orbit" : "Dock")</button> Mode: <b>@Nav.FlightMode</b>
</div>
@code {
    [Parameter] public ShipNav Nav { get; set; }
    [Parameter] public string Symbol { get; set; }
    [Parameter] public EventCallback<ShipNav> StateChanged { get; set; }

    private async Task ToggleDock()
    {
        var request = new RestRequest($"my/ships/{Symbol}/{(Nav.Status == "DOCKED" ? "orbit" : "dock")}", Method.Post);
        var response = await _client.PostRequest<ToggleDock>(request, true);

        if(response is not null)
        {
            Nav = response.Data.Nav;
            await StateChanged.InvokeAsync(Nav);
        }
    }

    private void WaypointDetailsClick ()
    {
        _navManager.NavigateTo($"waypoint/{Nav.SystemSymbol}/{Nav.WaypointSymbol}/{Symbol}");
    }
}
