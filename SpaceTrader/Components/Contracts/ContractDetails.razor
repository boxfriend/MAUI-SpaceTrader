@inject ApiClient _client
<div>
    @if (!string.IsNullOrWhiteSpace(Error))
    {
        <div class="alert alert-danger alert-dismissible fade show" role="alert">
            <strong>Error: </strong>@Error
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>
    }
    <p>@Contract.ID - @Contract.FactionSymbol</p>
    <p>
        @if(!Contract.Accepted)
        {
            <button type="button" class="btn btn-primary"
            @onclick="AcceptContract" disabled="@(!string.IsNullOrEmpty(Error))">Accept</button>

        }
        else
        {
            <span>Fullfilled: @Contract.Fulfilled</span>
        }
        @if(!Contract.Fulfilled)
        {
            <br />
            <span>Expiration: @Contract.Expiration</span>
        }
    </p>
</div>
<div>
    Deadline: @Contract.Terms.Deadline
    <span>Up front: @Contract.Terms.Payment.OnAccepted On Complete: @Contract.Terms.Payment.OnFulfilled</span>
    @if(Contract.Terms.Deliveries is not null)
    {
        <div>
            @foreach (var delivery in Contract.Terms.Deliveries)
            {
                <span>Deliver @delivery.UnitsRequired @delivery.TradeSymbol to @delivery.DestinationSymbol</span>
                <div class="progress">
                    <div class="progress-bar" role="progressbar" aria-valuenow="@delivery.Fulfilled" aria-valuemin="0" aria-valuemax="@delivery.UnitsRequired" style="width: @((delivery.Fulfilled / delivery.UnitsRequired)*100)%"></div>
                </div>
                <div>
                    @if (delivery.Fulfilled != delivery.UnitsRequired)
                    {
                        <button type="button" class="btn btn-info" @onclick="@(() => OnDeliverClick.InvokeAsync(Contract))">Deliver</button>
                    }
                </div>
            }
        </div>
        <div>
            @if (Contract.Terms.Deliveries.All(x => x.Fulfilled == x.UnitsRequired))
            {
                <button type="button" class="btn btn-success">Fulfill</button>
            }
        </div>
    }
</div>
@code {
    [Parameter] public Contract Contract { get; set; }
    [Parameter] public EventCallback<Contract> OnDeliverClick { get; set; }

    private string Error = string.Empty;

    private async Task AcceptContract ()
    {
        var request = new RestRequest($"my/contracts/{Contract.ID}/accept", Method.Post);
        var response = await _client.PostRequest<ContractAccept>(request, true);

        if(response is not null)
        {
            Contract = response.Data.Contract;
        } else
        {
            Error = "Unable to accept contract";
        }
    }


}
