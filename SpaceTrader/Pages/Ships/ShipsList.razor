@page "/shipslist"
@inject ApiClient _client
@inject ShipDbController _shipDatabase
@inject NavigationManager _navManager
<h3>Agent Ships</h3>

@if (!string.IsNullOrWhiteSpace(Error))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <strong>Error: </strong>@Error
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if(Ships is not null)
{
    <div>
        <button type="button" class="btn btn-info" @onclick="@RefreshShipsList">Refresh Ships</button>
    </div>
    <table class="table">
        <thead>
            <tr>
                <th width="10%">#</th>
                <th width="30%">Name</th>
                <th width="30%">Role</th>
                <th width="20%">Location</th>
                <th width="10%"></th>
            </tr>
        </thead>
        <tbody>

            @{
                var count = 1;
                foreach (var ship in Ships)
                {
                    <tr>
                        <td>@count</td>
                        <td>@ship.Symbol</td>
                        <td>@ship.Role</td>
                        <td>@ship.WaypointSymbol</td>
                        <td>
                            <button type="button" class="btn btn-info"
                            @onclick="(() => ShipDetails(ship.Symbol))">
                                Details
                            </button>
                        </td>
                    </tr>
                    count++;
                }
            }
        </tbody>
    </table>
}
else
{
    <div class="d-flex align-items-center">
        <strong>Loading All Ships...</strong>
        <div class="spinner-border ms-auto" role="status" aria-hidden="true"></div>
    </div>
}
@code {
    private List<ShipData> Ships { get; set; }

    private string Error = string.Empty;

    protected override async Task OnInitializedAsync ()
    {

        await LoadShips();
    }

    private async Task LoadShips()
    {
        Ships = await _shipDatabase.GetAgentShips(_client.LoggedInAgent.AccountID);
    }

    private void ShipDetails(string symbol)
    {
        _navManager.NavigateTo($"/shipdetails/{symbol}");
    }

    //This naively assumes agent owns few enough ships to not hit rate limit
    private async Task RefreshShipsList()
    {
        const int limit = 20;
        var page = 1;
        var total = 0;

        Ships.Clear();
        do
        {
            var request = new RestRequest("my/ships", Method.Get);
            request.AddParameter("limit", limit);
            request.AddParameter("page", page++);

            var response = await _client.GetRequest<Ship[]>(request, true);
            if(response is not null)
            {
                total = response.Meta.Total;
                foreach(var ship in response.Data)
                {
                    var data = ShipData.FromApiObject(ship);
                    data.AccountID = _client.LoggedInAgent.AccountID;
                    Ships.Add(data);
                    await _shipDatabase.InsertOrUpdate(data);
                }
            }
            else
            {
                Error = "Unable to load ships";
                break;
            }
        }
        while (Ships.Count < total);
    }
}
