@page "/shipdetails/{symbol}/navigation/{system}"
@inject ApiClient _client
@inject ShipDbController _shipsDb
@inject NavigationManager _navManager

<div>@Symbol Navigation</div>
@if (!string.IsNullOrWhiteSpace(Error))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <strong>Error: </strong>@Error
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if(_waypoints is not null)
{
    <table>
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Location</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var waypoint in _waypoints)
            {
                <tr>
                    <td>@waypoint.Symbol</td>
                    <td>@waypoint.Type</td>
                    <td>(@waypoint.X, @waypoint.Y)</td>
                    <td>
                        <button type="button" class="btn btn-info" data-bs-toggle="modal" data-bs-target="#navModal" @onclick="@(() => toShow = waypoint)">Details</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <div class="btn-group">
        <button type="button" class="btn btn-info" disabled="@(_page == 1)"
        @onclick="(() => LoadPage(_page - 1))">
            Prev Page
        </button>
        <button type="button" class="btn btn-info" disabled="@(_total < _page * _limit)"
        @onclick="(() => LoadPage(_page + 1))">
            Next Page
        </button>
    </div>
}
else
{
    <p>Loading . . .</p>
}
@if(toShow is not null)
{   
    <div class="modal fade" id="navModal" tabindex="-1" aria-labelledby="modalLabel" aria-hidden="true">
        <div class="modal-dialog modal-dialog-centered modal-dialog-scrollable">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="modalLabel">@toShow.Symbol</h5>
                    <button type="button" class="btn btn-close" data-bs-dismiss="modal" aria-label="Close"/>
                </div>
                <div class="modal-body">
                    <SpaceTrader.Components.Waypoints.WaypointView Waypoint="@toShow" />
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-success" data-bs-dismiss="modal" @onclick="@(async () => await NavTo(toShow.Symbol))">Navigate Here</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public string Symbol { get; set; }
    [Parameter] public string System { get; set; }

    private Waypoint[] _waypoints;

    private int _total = 1;
    private int _page = 1;
    private const int _limit = 20;

    private string Error { get; set; }

    private int MaxPages => (int)Math.Ceiling(_total / (float)_limit);

    private Waypoint toShow = null;

    protected override async Task OnInitializedAsync ()
    {
        await LoadPage(1);
    }

    private async Task LoadPage (int page)
    {
        page = Math.Clamp(page, 1, MaxPages);
        var request = new RestRequest($"systems/{System}/waypoints", Method.Get);
        request.AddParameter("limit", _limit);
        request.AddParameter("page", page);

        var response = await _client.GetRequest<Waypoint[]>(request, true);

        if (response is not null)
        {
            _page = page;
            _total = response.Meta.Total;
            _waypoints = response.Data;
        } else
        {
            Error = "Unable to retrieve ships, make sure you are logged in";
        }
    }

    private async Task NavTo(string symbol)
    {
        var ship = await _shipsDb.Get<Ship>(Symbol);
        var request = new RestRequest($"/my/ships/{Symbol}/navigate");
        request.AddParameter("waypointSymbol", symbol);

        var response = await _client.PostRequest<NavResponse>(request, true);

        if(response is not null)
        {
            ship = ship with { Nav = response.Data.Nav, Fuel = response.Data.Fuel };
            await _shipsDb.Insert(ship);
            _navManager.NavigateTo($"shipdetails/{Symbol}");
        }
        else
        {
            Error = $"Unable to navigate to {symbol}";
        }

    }
}
