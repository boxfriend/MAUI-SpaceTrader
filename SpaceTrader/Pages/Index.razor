@page "/"
@using RestSharp.Authenticators;
@using SpaceTrader.Components
@inject RestClient _client
@inject AgentDbController _database
@inject NavigationManager _navManager

<h1>Agents</h1>
<p style="color:red">@Error</p>
@if (_allAgents == null)
{
    <p><em>Loading...</em></p>
} else
{
    <p>
        <button class="btn btn-success"
        @onclick="AddNew">
            Add New Agent
        </button>

        <button class="btn btn-success"
        @onclick="AddExisting">
            Add Existing Agent
        </button>
    </p>

    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Name</th>
                <th>Credits</th>
                <th>Account ID</th>
                <th></th>
            </tr>
        </thead>
        <tbody>

            @{
                var count = 1;
                foreach (var agent in _allAgents)
                {
                    <tr>
                        <td>@count</td>
                        <td>@agent.Name</td>
                        <td>@agent.Credits</td>
                        <td>@agent.AccountID</td>
                        <td>
                            <button class="btn btn-primary" disabled="@IsLoggedIn(agent.Token)"
                            @onclick="(() => Login(agent.Token))">
                                Login
                            </button>
                            <button class="btn btn-danger"
                            @onclick="(() => Delete(agent))">
                                Delete
                            </button>
                            <button class="btn btn-secondary"
                            @onclick="(() => ViewDetails(agent))">
                                Info
                            </button>
                        </td>
                    </tr>
                    count++;
                }
            }
        </tbody>
    </table>

    @if(_dialogOpen)
    {
        <InputDialog Caption="@_title"
                       Message="@_message"
                       PlaceHolder="@_placeholder"
                       OnClose="@_onDialogComplete"/>
    }
}
@code {
    private List<AgentData> _allAgents;
    private AgentData _agent;

    private string Error = string.Empty;

    //Add Agent Dialog
    private bool _dialogOpen = false;
    private string _title = string.Empty;
    private string _message = string.Empty;
    private string _placeholder = string.Empty;
    private Func<string, Task> _onDialogComplete = null;

    protected override async Task OnInitializedAsync ()
    {
        _allAgents = await _database.GetAll();
    }

    private void AddNew()
    {
        _dialogOpen = true;
        _title = "Create New Agent";
        _message = "Enter the name you wish to use for the agent";
        _placeholder = "Agent Name";
        _onDialogComplete = CreateNewAgent;
    }

    private void AddExisting()
    {
        _dialogOpen = true;
        _title = "Retrieve Existing Agent";
        _message = "Enter your agent token.";
        _placeholder = "Agent Token";
        _onDialogComplete = RetrieveAgent;
    }

    private async Task RetrieveAgent(string token)
    {
        _dialogOpen = false;

        if (string.IsNullOrWhiteSpace(token))
            return;

        var request = new RestRequest(@"my/agent", Method.Get);
        request.Authenticator = new JwtAuthenticator(token);

        try
        {
            var response = await _client.ExecuteGetAsync<Response<Agent>>(request);

            if(response.IsSuccessStatusCode)
            {
                var agent = AgentData.FromAPIObject(response.Data.Data, token);
                await _database.Create(agent);
                _allAgents.Add(agent);
                Login(token);
            } else
            {
                Error = response.ErrorMessage ?? response.ErrorException.Message;
            }

        } catch (Exception){ }

    }

    private async Task CreateNewAgent(string name)
    {
        _dialogOpen = false;

        if (string.IsNullOrWhiteSpace(name))
            return;

        //TODO: sent POST https://api.spacetraders.io/v2/register
        var request = new RestRequest(@"register", Method.Post);

        request.AddJsonBody(new { symbol = name, faction = "COSMIC" });

        try
        {
            var response = await _client.ExecutePostAsync<Response<Registration>>(request);

            if (response.IsSuccessStatusCode)
            {
                var registration = response.Data.Data;
                var agent = AgentData.FromAPIObject(registration.Agent, registration.Token);
                await _database.Create(agent);
                _allAgents.Add(agent);
                Login(agent.Token);
            } else
            {
                Error = response.StatusDescription ?? (response.ErrorMessage ?? response.ErrorException.Message);
            }

        } catch (Exception) { }

    }

    private async Task Delete(AgentData agent)
    {
        await _database.Delete(agent);
        _allAgents.Remove(agent);
    }

    private void Login(string token)
    {
        //TODO: Magic this away into possibly another singleton, make client not singleton and instead controlled by new singleton
        _client.DefaultParameters.RemoveParameter("Authorization", ParameterType.HttpHeader);
        //Is this really the only way to set the bearer token without creating a new instance?
        _client.AddDefaultHeader("Authorization", $"Bearer {token}");
        _navManager.NavigateTo("myagent");
    }

    private void ViewDetails(AgentData agent)
    {
        _navManager.NavigateTo($"agentdetails/{agent.AccountID}");
    }

    private bool IsLoggedIn(string token)
    {
        return _client.DefaultParameters.Any(x => x.Name == "Authorization" && x.Value as string == $"Bearer {token}");
    }
}