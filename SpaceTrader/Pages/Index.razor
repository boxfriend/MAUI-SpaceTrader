@page "/"
@using RestSharp.Authenticators;
@using SpaceTrader.Components
@inject ApiClient _client
@inject AgentDbController _database
@inject NavigationManager _navManager

<h1>Agents</h1>
<p style="color:red">@Error</p>
@if (_allAgents == null)
{
    <p><em>Loading...</em></p>
} else
{
    <p>
        <button class="btn btn-success"
        @onclick="AddNew">
            Add New Agent
        </button>

        <button class="btn btn-success"
        @onclick="AddExisting">
            Add Existing Agent
        </button>
    </p>

    <table class="table">
        <thead>
            <tr>
                <th>#</th>
                <th>Name</th>
                <th>Credits</th>
                <th>Account ID</th>
                <th></th>
            </tr>
        </thead>
        <tbody>

            @{
                var count = 1;
                foreach (var agent in _allAgents)
                {
                    <tr>
                        <td>@count</td>
                        <td>@agent.Name</td>
                        <td>@agent.Credits</td>
                        <td>@agent.AccountID</td>
                        <td>
                            <button class="btn btn-primary" disabled="@_client.IsLoggedInAgent(agent)"
                            @onclick="(() => _client.Login(agent))">
                                Login
                            </button>
                            <button class="btn btn-danger"
                            @onclick="(() => Delete(agent))">
                                Delete
                            </button>
                            <button class="btn btn-secondary"
                            @onclick="(() => ViewDetails(agent))">
                                Info
                            </button>
                        </td>
                    </tr>
                    count++;
                }
            }
        </tbody>
    </table>

    @if(_retrieveAgentDialog)
    {
        <InputDialog Caption="@_title"
                       Message="@_message"
                       PlaceHolder="@_placeholder"
                       OnClose="@_onDialogComplete"/>
    }
    @if(_registerAgentDialog)
    {
        <AgentRegistration OnClose="CreateNewAgent"/>
    }

}
@code {
    private List<AgentData> _allAgents;
    private AgentData _agent;

    private string Error = string.Empty;

    //Add Agent Dialog
    private bool _retrieveAgentDialog = false;
    private bool _registerAgentDialog = false;
    private string _title = string.Empty;
    private string _message = string.Empty;
    private string _placeholder = string.Empty;
    private Func<string, Task> _onDialogComplete = null;

    protected override async Task OnInitializedAsync ()
    {
        _allAgents = await _database.GetAll();
    }

    private void AddNew() => _registerAgentDialog = true;

    private void AddExisting()
    {
        _retrieveAgentDialog = true;
        _title = "Retrieve Existing Agent";
        _message = "Enter your agent token.";
        _placeholder = "Agent Token";
        _onDialogComplete = RetrieveAgent;
        ClearError();
    }

    private async Task RetrieveAgent(string token)
    {
        _retrieveAgentDialog = false;

        if (string.IsNullOrWhiteSpace(token))
            return;

        var agent = await _client.RetrieveAgent(token);
        if(agent is not null)
        {
            await _database.Create(agent);
            _allAgents.Add(agent);
            _client.Login(agent);
        }
        else
        {
            Error = "Unable to retrieve agent.";
        }
    }

    private void ClearError() => Error = string.Empty;

    private async Task CreateNewAgent(AgentRegisterData agentData)
    {
        _registerAgentDialog = false;

        if (agentData is null || string.IsNullOrWhiteSpace(agentData.AgentName))
            return;

        var faction = string.IsNullOrWhiteSpace(agentData.FactionName) ? "COSMIC" : agentData.FactionName;
        var registration = await _client.RegisterNewAgent(agentData.AgentName, faction);
        if(registration is not null)
        {
            var agent = AgentData.FromAPIObject(registration.Agent, registration.Token);
            await _database.Create(agent);
            _allAgents.Add(agent);
            _client.Login(agent);
        }
        else
        {
            Error = $"Unable to register agent {agentData}";
        }
    }

    private async Task Delete(AgentData agent)
    {
        await _database.Delete(agent);
        _allAgents.Remove(agent);
        ClearError();
    }

    private void ViewDetails(AgentData agent)
    {
        _navManager.NavigateTo($"agentdetails/{agent.AccountID}");
    }
}