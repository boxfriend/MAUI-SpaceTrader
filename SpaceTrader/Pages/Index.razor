@page "/"
@using RestSharp.Authenticators;
@using SpaceTrader.Components
@inject ApiClient _client
@inject AgentDbController _database
@inject ShipDbController _shipsDb
@inject ContractDbController _contractsDb
@inject NavigationManager _navManager

<h1>Agents</h1>
@if (!string.IsNullOrWhiteSpace(Error))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <strong>Error: </strong>@Error
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}
@if (_allAgents == null)
{
    <p><em>Loading...</em></p>
} else
{
    <p>
        <button class="btn btn-success"
        @onclick="AddNew">
            Add New Agent
        </button>

        <button class="btn btn-success"
        @onclick="AddExisting">
            Add Existing Agent
        </button>
    </p>

    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope ="col">Name</th>
                <th scope="col">Credits</th>
                <th scope="col">Account ID</th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>

            @{
                var count = 1;
                foreach (var agent in _allAgents)
                {
                    <tr class="align-middle">
                        <td scope ="row">@count</td>
                        <td>@agent.Name</td>
                        <td>@agent.Credits</td>
                        <td>@agent.AccountID</td>
                        <td>
                            <button class="btn btn-primary" disabled="@_client.IsLoggedInAgent(agent)"
                            @onclick="(async () => await LoginAgent(agent))">
                                Login
                            </button>
                            <button class="btn btn-danger"
                            @onclick="(() => Delete(agent))">
                                Delete
                            </button>
                            <button class="btn btn-secondary"
                            @onclick="(() => ViewDetails(agent))">
                                Info
                            </button>
                        </td>
                    </tr>
                    count++;
                }
            }
        </tbody>
    </table>

    @if(_retrieveAgentDialog)
    {
        <InputDialog Caption="@_title"
                       Message="@_message"
                       PlaceHolder="@_placeholder"
                       OnClose="@_onDialogComplete"/>
    }
    @if(_registerAgentDialog)
    {
        <AgentRegistration OnClose="CreateNewAgent"/>
    }

}
@code {
    private List<Agent> _allAgents;

    private string Error = string.Empty;

    //Add Agent Dialog
    private bool _retrieveAgentDialog = false;
    private bool _registerAgentDialog = false;
    private string _title = string.Empty;
    private string _message = string.Empty;
    private string _placeholder = string.Empty;
    private Func<string, Task> _onDialogComplete = null;

    protected override async Task OnInitializedAsync ()
    {
        _allAgents = await _database.GetAll();
    }

    private void AddNew() => _registerAgentDialog = true;

    private void AddExisting()
    {
        _retrieveAgentDialog = true;
        _title = "Retrieve Existing Agent";
        _message = "Enter your agent token.";
        _placeholder = "Agent Token";
        _onDialogComplete = RetrieveAgent;
        ClearError();
    }

    private async Task RetrieveAgent(string token)
    {
        _retrieveAgentDialog = false;

        if (string.IsNullOrWhiteSpace(token))
            return;

        var agent = await _client.RetrieveAgent(token);
        if(agent is not null)
        {
            await _database.Insert(agent);
            _allAgents.Add(agent);
            _client.Login(agent);
        }
        else
        {
            Error = "Unable to retrieve agent.";
        }
    }

    private void ClearError() => Error = string.Empty;

    private async Task CreateNewAgent(AgentRegisterData agentData)
    {
        _registerAgentDialog = false;

        if (agentData is null || string.IsNullOrWhiteSpace(agentData.AgentName))
            return;

        var faction = string.IsNullOrWhiteSpace(agentData.FactionName) ? "COSMIC" : agentData.FactionName;
        var registration = await _client.RegisterNewAgent(agentData.AgentName, faction);
        if(registration is not null)
        {
            var agent = registration.Agent with { Token = registration.Token };
            var accountID = agent.AccountID;
            await _database.Insert(agent);
            _allAgents.Add(agent);
            _client.Login(agent);

            var contract = registration.Contract with { AccountID = accountID };
            await _contractsDb.Insert(contract);

            var ship = ShipData.FromApiObject(registration.Ship);
            ship.AccountID = accountID;
            await _shipsDb.Insert(ship);
        }
        else
        {
            Error = $"Unable to register agent {agentData}";
        }
    }

    private async Task Delete(Agent agent)
    {
        await _database.Delete(agent);
        _allAgents.Remove(agent);
        ClearError();
    }

    private void ViewDetails(Agent agent)
    {
        _navManager.NavigateTo($"agentdetails/{agent.AccountID}");
    }

    private async Task LoginAgent(Agent agent)
    {
        _client.Login(agent);

        var request = new RestRequest("/my/agent");
        var response = await _client.GetRequest<Agent>(request, true);

        if (response is not null)
        {
            var myAgent = response.Data;
            await _database.Insert(myAgent);
        } else
        {
            Error = "Unable to sign in. Please ensure you have a valid internet connection and a valid API token.";
        }
    }
}