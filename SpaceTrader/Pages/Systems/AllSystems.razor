@page "/allsystems"
@inject ApiClient _client
@inject SystemDbController _systemDatabase
@inject NavigationManager _navManager
<h3>AllSystems</h3>

@if (!string.IsNullOrWhiteSpace(Error))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <strong>Error: </strong>@Error
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div>
    <button class="btn btn-danger" @onclick="@RefreshAllSystems">Refresh Systems Database</button>
</div>

@if (Systems != null && Systems.Count > 0)
{
    <table class="table">
        <thead>
            <tr>
                <th width="10%">#</th>
                <th width="30%">Name</th>
                <th width="30%">Type</th>
                <th width="20%">Sector</th>
                <th width="10%"></th>
            </tr>
        </thead>
        <tbody>
        @{
            var count = (_page * _limit);
            for(var i = 0; i < _limit && i + count < Systems.Count; i++)
            {
                var system = Systems[i + count];
                <tr>
                    <td>@(i + count + 1)</td>
                    <td>@system.Symbol</td>
                    <td>@system.Type</td>
                    <td>@system.SectorSymbol</td>
                    <td>
                        <button type="button" class="btn btn-info"
                        @onclick="(() => SystemDetails(system))">
                            Details
                        </button>
                    </td>
                </tr>
            }
        }
        </tbody>
    </table>

    <div>
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-center">
                <li class="page-item @(_page < 1 ? "disabled" : "")">
                    <a class="page-link" aria-label="Previous" aria-disabled="@(_page < 1)" @onclick="@(() => LoadPage(_page - 1))">
                        <span aria-hidden="true">&laquo;</span>
                    </a>
                </li>
                @{
                    var min = Math.Clamp(_page - 2, 0, MaxPages);
                    var max = Math.Clamp(_page + 3, 0, MaxPages);
                }
                @for(var i = min; i < max; i++)
                {
                    var page = i;
                    <li class="page-item @(_page == page ? "active" : "")"><a class="page-link" @onclick="@(() => LoadPage(page))" aria-disabled="@(_page == i)">@(page + 1)</a></li>
                }
                <li class="page-item @(_page >= MaxPages - 1 ? "disabled" : "")">
                    <a class="page-link" aria-label="Next" aria-disabled="@(_page >= MaxPages)" @onclick="@(() => LoadPage(_page + 1))">
                        <span aria-hidden="true">&raquo;</span>
                    </a>
                </li>
            </ul>
        </nav>
    </div>
} else
{
    <p>Loading . . .</p>
}

@code {
    private List<System> Systems { get; set; }

    private int _total = 1;
    private int _page = 0;
    private int _limit = 100;

    private string Error { get; set; }

    private int MaxPages => (int)Math.Ceiling(_total / (float)_limit);

    protected override async Task OnInitializedAsync ()
    {
        Systems = await _systemDatabase.GetAll<System>();
        _total = Systems.Count;

        if(_total < 1)
        {
            await RefreshAllSystems();
        }
        LoadPage(0);
    }

    private async Task RefreshAllSystems()
    {
        Systems = null;
        var response = await _client.GetAllSystems();

        if(response is not null)
        {
            Systems = response;
            _total = Systems.Count;
            await _systemDatabase.Insert(Systems.ToArray());
            LoadPage(0);
        }
    }

    private void LoadPage (int page)
    {
        _page = Math.Clamp(page, 0, MaxPages - 1);
        this.StateHasChanged();
    }

    private void SystemDetails(System system)
    {
        _navManager.NavigateTo($"/systemdetails/{system.Symbol}");
    }
}