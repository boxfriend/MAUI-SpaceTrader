@page "/allsystems"
@inject ApiClient _client
@inject SystemDbController _systemDatabase
@inject NavigationManager _navManager
<h3>AllSystems</h3>

@if (!string.IsNullOrWhiteSpace(Error))
{
    <div class="alert alert-danger alert-dismissible fade show" role="alert">
        <strong>Error: </strong>@Error
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

@if (Systems != null)
{
    <table class="table">
        <thead>
            <tr>
                <th width="10%">#</th>
                <th width="30%">Name</th>
                <th width="30%">Type</th>
                <th width="20%">Sector</th>
                <th width="10%"></th>
            </tr>
        </thead>
        <tbody>

            @{
                var count = ((_page - 1) * _limit) + 1;
                foreach (var system in Systems)
                {
                    <tr>
                        <td>@count</td>
                        <td>@system.Symbol</td>
                        <td>@system.Type</td>
                        <td>@system.SectorSymbol</td>
                        <td>
                            <button type="button" class="btn btn-info"
                            @onclick="(() => SystemDetails(system))">
                                Details
                            </button>
                        </td>
                    </tr>
                    count++;
                }
            }
        </tbody>
    </table>

    <div class="btn-group">
        <button type="button" class="btn btn-info" disabled="@(_page == 1)"
        @onclick="(() => LoadPage(_page - 1))">
            Prev Page
        </button>
        <button type="button" class="btn btn-info" disabled="@(_total < _page * _limit)"
        @onclick="(() => LoadPage(_page + 1))">
            Next Page
        </button>
    </div>
} else
{
    <p>Loading . . .</p>
}

@code {
    private System[] Systems { get; set; }

    private int _total = 1;
    private int _page = 1;
    private const int _limit = 20;

    private string Error { get; set; }

    private int MaxPages => (int)Math.Ceiling(_total / (float)_limit);

    protected override async Task OnInitializedAsync ()
    {
        await LoadPage(_page);
    }

    private async Task LoadPage (int page)
    {
        Systems = null;
        page = Math.Clamp(page, 1, MaxPages);
        var request = new RestRequest("systems", Method.Get);
        request.AddParameter("limit", _limit);
        request.AddParameter("page", page);

        var response = await _client.GetRequest<System[]>(request, true);

        if (response is not null)
        {
            _page = page;
            _total = response.Meta.Total;
            Systems = response.Data;
            await _systemDatabase.Insert(Systems);
        } else
        {
            Error = "Unable to retrieve ships, make sure you are logged in";
        }
    }

    private void SystemDetails(System system)
    {
        _navManager.NavigateTo($"/systemdetails/{system.Symbol}");
    }
}
